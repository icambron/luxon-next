* figure out what to do with all the random types floating around
* figure out how to export the core types better?
* tests for defaultLocale

Currently:
 - I have most of the parser working
 - Remaining issue is parsing digits in other numbering system
 - Mostly works, but one locale uses numbers for their months. Which should be fine, but we don't pass the numbering system through to the lister
 it provides 1-12 to the lister, instead of [weird char]-[weird-char]. So the regex doesn't match
 - See the commented-out Handidec test in fromFormatExplain.test.js
 - The real problem is that we don't have a good way to pass the numbering system to the formatter (??). Which is a huge oversight.
 - Fixing this requires reworking all that crazy convenience parameter logic built into the formatting system (yuck)

Next big challenge is diff()
Or could do more token parsing
    - redo quoting to be like [] instead of '', which is _lame_
Also need to figure out how to make { setZone } work

Did a deep drive into the future of the pipeline operator:

 * We are currently using "minimal" which assumes the LHS of the pipe is a unary expression. That's why we curry everything
 * There are three proposals: minimal F# (as above), F# with other bells and whistles, and hack-style. (There was also smart-mix, which basically means "use hack-style if there's a topic, otherwise use F#". This is the best proposal, but it's been rejected. So it goes)
 * All are implemented by the babel plugin, but I can only find editor support (e.g. in Webstorm) for the minimal one. So sticking with that for now
 * The TC committee seems to be leaning toward hack. That's fine, but it means we'll uncurry everything. Instead of foo() |> bar(options) |> baz() |> quux, we'll want foo() |> bar(%, options), baz(%), quux(%). `dt` always in the first arg position
 * Going to leave all this in place until we get editor support for hack-style. It's a huge refactor, because you have to uncurry everything all at once, but just a chore in the end